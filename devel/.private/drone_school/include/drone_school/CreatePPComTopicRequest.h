// Generated by gencpp from file drone_school/CreatePPComTopicRequest.msg
// DO NOT EDIT!


#ifndef DRONE_SCHOOL_MESSAGE_CREATEPPCOMTOPICREQUEST_H
#define DRONE_SCHOOL_MESSAGE_CREATEPPCOMTOPICREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_school
{
template <class ContainerAllocator>
struct CreatePPComTopicRequest_
{
  typedef CreatePPComTopicRequest_<ContainerAllocator> Type;

  CreatePPComTopicRequest_()
    : source()
    , targets()
    , topic_name()
    , package_name()
    , message_type()  {
    }
  CreatePPComTopicRequest_(const ContainerAllocator& _alloc)
    : source(_alloc)
    , targets(_alloc)
    , topic_name(_alloc)
    , package_name(_alloc)
    , message_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_type;
  _source_type source;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _targets_type;
  _targets_type targets;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_name_type;
  _topic_name_type topic_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _package_name_type;
  _package_name_type package_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type_type;
  _message_type_type message_type;





  typedef boost::shared_ptr< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CreatePPComTopicRequest_

typedef ::drone_school::CreatePPComTopicRequest_<std::allocator<void> > CreatePPComTopicRequest;

typedef boost::shared_ptr< ::drone_school::CreatePPComTopicRequest > CreatePPComTopicRequestPtr;
typedef boost::shared_ptr< ::drone_school::CreatePPComTopicRequest const> CreatePPComTopicRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator1> & lhs, const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source &&
    lhs.targets == rhs.targets &&
    lhs.topic_name == rhs.topic_name &&
    lhs.package_name == rhs.package_name &&
    lhs.message_type == rhs.message_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator1> & lhs, const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_school

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5039a038352a619c947e87a4f84f27a";
  }

  static const char* value(const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5039a038352a619ULL;
  static const uint64_t static_value2 = 0xc947e87a4f84f27aULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_school/CreatePPComTopicRequest";
  }

  static const char* value(const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string source            # Source of the topic\n"
"string[] targets         # Names of nodes that can receive this message,\n"
"                         # set to 'all' if all nodes can receive the message\n"
"string topic_name\n"
"string package_name\n"
"string message_type\n"
;
  }

  static const char* value(const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.targets);
      stream.next(m.topic_name);
      stream.next(m.package_name);
      stream.next(m.message_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CreatePPComTopicRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_school::CreatePPComTopicRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_school::CreatePPComTopicRequest_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source);
    s << indent << "targets[]" << std::endl;
    for (size_t i = 0; i < v.targets.size(); ++i)
    {
      s << indent << "  targets[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.targets[i]);
    }
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic_name);
    s << indent << "package_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.package_name);
    s << indent << "message_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_SCHOOL_MESSAGE_CREATEPPCOMTOPICREQUEST_H
