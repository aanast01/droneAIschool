// Generated by gencpp from file rotors_comm/PPComTopology.msg
// DO NOT EDIT!


#ifndef ROTORS_COMM_MESSAGE_PPCOMTOPOLOGY_H
#define ROTORS_COMM_MESSAGE_PPCOMTOPOLOGY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/Odometry.h>

namespace rotors_comm
{
template <class ContainerAllocator>
struct PPComTopology_
{
  typedef PPComTopology_<ContainerAllocator> Type;

  PPComTopology_()
    : header()
    , node_id()
    , node_role()
    , node_alive()
    , node_odom()
    , range()  {
    }
  PPComTopology_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , node_id(_alloc)
    , node_role(_alloc)
    , node_alive(_alloc)
    , node_odom(_alloc)
    , range(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _node_id_type;
  _node_id_type node_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _node_role_type;
  _node_role_type node_role;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _node_alive_type;
  _node_alive_type node_alive;

   typedef std::vector< ::nav_msgs::Odometry_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::nav_msgs::Odometry_<ContainerAllocator> >> _node_odom_type;
  _node_odom_type node_odom;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _range_type;
  _range_type range;





  typedef boost::shared_ptr< ::rotors_comm::PPComTopology_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rotors_comm::PPComTopology_<ContainerAllocator> const> ConstPtr;

}; // struct PPComTopology_

typedef ::rotors_comm::PPComTopology_<std::allocator<void> > PPComTopology;

typedef boost::shared_ptr< ::rotors_comm::PPComTopology > PPComTopologyPtr;
typedef boost::shared_ptr< ::rotors_comm::PPComTopology const> PPComTopologyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rotors_comm::PPComTopology_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rotors_comm::PPComTopology_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rotors_comm::PPComTopology_<ContainerAllocator1> & lhs, const ::rotors_comm::PPComTopology_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.node_id == rhs.node_id &&
    lhs.node_role == rhs.node_role &&
    lhs.node_alive == rhs.node_alive &&
    lhs.node_odom == rhs.node_odom &&
    lhs.range == rhs.range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rotors_comm::PPComTopology_<ContainerAllocator1> & lhs, const ::rotors_comm::PPComTopology_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rotors_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rotors_comm::PPComTopology_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rotors_comm::PPComTopology_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rotors_comm::PPComTopology_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rotors_comm::PPComTopology_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rotors_comm::PPComTopology_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rotors_comm::PPComTopology_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rotors_comm::PPComTopology_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3539f38cd38808600ac8586b8226ebc8";
  }

  static const char* value(const ::rotors_comm::PPComTopology_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3539f38cd3880860ULL;
  static const uint64_t static_value2 = 0x0ac8586b8226ebc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::rotors_comm::PPComTopology_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rotors_comm/PPComTopology";
  }

  static const char* value(const ::rotors_comm::PPComTopology_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rotors_comm::PPComTopology_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# IDs of the nodes\n"
"string[] node_id\n"
"\n"
"# Role of the node\n"
"string[] node_role\n"
"\n"
"# Dead of alive\n"
"bool[] node_alive\n"
"\n"
"# Odometry of the node\n"
"nav_msgs/Odometry[] node_odom\n"
"\n"
"# Distance measurent as 1xM array from the NxN disMatrix\n"
"float32[] range\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rotors_comm::PPComTopology_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rotors_comm::PPComTopology_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.node_id);
      stream.next(m.node_role);
      stream.next(m.node_alive);
      stream.next(m.node_odom);
      stream.next(m.range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PPComTopology_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rotors_comm::PPComTopology_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rotors_comm::PPComTopology_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "node_id[]" << std::endl;
    for (size_t i = 0; i < v.node_id.size(); ++i)
    {
      s << indent << "  node_id[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node_id[i]);
    }
    s << indent << "node_role[]" << std::endl;
    for (size_t i = 0; i < v.node_role.size(); ++i)
    {
      s << indent << "  node_role[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node_role[i]);
    }
    s << indent << "node_alive[]" << std::endl;
    for (size_t i = 0; i < v.node_alive.size(); ++i)
    {
      s << indent << "  node_alive[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.node_alive[i]);
    }
    s << indent << "node_odom[]" << std::endl;
    for (size_t i = 0; i < v.node_odom.size(); ++i)
    {
      s << indent << "  node_odom[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "    ", v.node_odom[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROTORS_COMM_MESSAGE_PPCOMTOPOLOGY_H
